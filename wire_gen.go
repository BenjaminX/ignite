// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package ignite

import (
	"github.com/go-ignite/ignite/config"
	"github.com/go-ignite/ignite/model"
	"github.com/go-ignite/ignite/server"
	"github.com/go-ignite/ignite/service"
	"github.com/go-ignite/ignite/state"
)

// Injectors from wire.go:

func Init() (*Ignite, error) {
	configConfig, err := config.Init()
	if err != nil {
		return nil, err
	}
	configState := configConfig.State
	configModel := configConfig.Model
	handler, err := model.InitHandler(configModel)
	if err != nil {
		return nil, err
	}
	options := &state.Options{
		Config:       configState,
		ModelHandler: handler,
	}
	stateHandler, err := state.Init(options)
	if err != nil {
		return nil, err
	}
	configServer := configConfig.Server
	configService := configConfig.Service
	serviceOptions := &service.Options{
		StateHandler: stateHandler,
		ModelHandler: handler,
		Config:       configService,
	}
	serviceService := service.New(serviceOptions)
	serverOptions := &server.Options{
		Config:  configServer,
		Service: serviceService,
	}
	serverServer := server.New(serverOptions)
	ignite := &Ignite{
		stateHandler: stateHandler,
		server:       serverServer,
	}
	return ignite, nil
}
